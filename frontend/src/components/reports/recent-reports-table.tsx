"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Download, Clock, CheckCircle, AlertCircle } from "lucide-react"
import { format } from "date-fns"
import { ReportInstance } from "@/types/reports"

interface RecentReportsTableProps {
  reports: ReportInstance[]
  onDownload: (report: ReportInstance) => void
}

const statusConfig = {
  processing: {
    icon: Clock,
    variant: "secondary" as const,
    className: "text-yellow-600 dark:text-yellow-400"
  },
  completed: {
    icon: CheckCircle,
    variant: "default" as const,
    className: "text-green-600 dark:text-green-400"
  },
  failed: {
    icon: AlertCircle,
    variant: "destructive" as const,
    className: "text-red-600 dark:text-red-400"
  }
}

export function RecentReportsTable({ reports, onDownload }: RecentReportsTableProps) {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Recent Reports</CardTitle>
        <CardDescription>
          Recently generated reports and their status
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Report Name</TableHead>
              <TableHead>Generated</TableHead>
              <TableHead>Generated By</TableHead>
              <TableHead>Status</TableHead>
              <TableHead>Format</TableHead>
              <TableHead>Size</TableHead>
              <TableHead className="text-right">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {reports.map((report) => {
              const config = statusConfig[report.status]
              const IconComponent = config.icon

              return (
                <TableRow key={report.id}>
                  <TableCell className="font-medium">
                    {report.name}
                  </TableCell>
                  <TableCell>
                    {format(new Date(report.generatedAt), "MMM d, yyyy 'at' h:mm a")}
                  </TableCell>
                  <TableCell>{report.generatedBy}</TableCell>
                  <TableCell>
                    <Badge variant={config.variant} className="gap-1">
                      <IconComponent className="h-3 w-3" />
                      {report.status}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <Badge variant="outline">
                      {report.format.toUpperCase()}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    {report.size || "â€”"}
                  </TableCell>
                  <TableCell className="text-right">
                    {report.status === "completed" && report.downloadUrl ? (
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => onDownload(report)}
                      >
                        <Download className="mr-2 h-4 w-4" />
                        Download
                      </Button>
                    ) : (
                      <span className="text-muted-foreground text-sm">
                        {report.status === "processing" ? "Processing..." : "Not available"}
                      </span>
                    )}
                  </TableCell>
                </TableRow>
              )
            })}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  )
}