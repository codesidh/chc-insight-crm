version: '3.8'

services:
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      target: production
    container_name: chc-crm-frontend-staging
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=staging
      - NEXT_PUBLIC_API_URL=http://backend:3001/api
    env_file:
      - .env.staging
    depends_on:
      - backend
    networks:
      - chc-crm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: production
    container_name: chc-crm-backend-staging
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=staging
      - PORT=3001
    env_file:
      - .env.staging
    depends_on:
      - postgres
      - redis
    networks:
      - chc-crm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  postgres:
    image: postgres:15-alpine
    container_name: chc-crm-postgres-staging
    environment:
      - POSTGRES_DB=chc_insight_crm_staging
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=staging_password
    env_file:
      - .env.staging
    volumes:
      - postgres_data_staging:/var/lib/postgresql/data
      - ../backend/database/migrations:/docker-entrypoint-initdb.d/migrations
    networks:
      - chc-crm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  redis:
    image: redis:7-alpine
    container_name: chc-crm-redis-staging
    command: redis-server --requirepass staging_redis_password
    env_file:
      - .env.staging
    volumes:
      - redis_data_staging:/data
    networks:
      - chc-crm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  nginx:
    image: nginx:alpine
    container_name: chc-crm-nginx-staging
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - chc-crm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data_staging:
    driver: local
  redis_data_staging:
    driver: local

networks:
  chc-crm-network:
    driver: bridge
    name: chc-crm-network-staging