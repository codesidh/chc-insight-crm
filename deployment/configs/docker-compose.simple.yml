version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: chc-crm-postgres-prod
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      POSTGRES_DB: ${DB_NAME:-chc_insight_crm}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - chc-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-chc_insight_crm}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: chc-crm-redis-prod
    restart: unless-stopped
    env_file:
      - .env.production
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-redis_password_123}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - chc-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Backend API
  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
    container_name: chc-crm-backend-prod
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # Override database name for production
      PRODUCTION_DATABASE_NAME: chc_insight_crm
      PRODUCTION_DATABASE_HOST: postgres
      PRODUCTION_DATABASE_USERNAME: postgres
      PRODUCTION_DATABASE_PASSWORD: secure_password_123
    ports:
      - "3001:3001"
    networks:
      - chc-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Application
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile.simple
      args:
        NODE_ENV: production
        NEXT_TELEMETRY_DISABLED: 1
    container_name: chc-crm-frontend-prod
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3001/api
      NEXT_TELEMETRY_DISABLED: 1
    ports:
      - "3000:3000"
    networks:
      - chc-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

networks:
  chc-network:
    driver: bridge
    name: chc-crm-network-prod

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local